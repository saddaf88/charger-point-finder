{"ast":null,"code":"var _jsxFileName = \"/Users/saddafafrinkhan/Projects/Mine/React/chargepointfinder/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { MapContainer, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { icon } from \"leaflet\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar options = {\n  enableHighAccuracy: true,\n  timeout: 5000,\n  maximumAge: 0\n};\n\nfunction success(pos) {\n  var crd = pos.coords;\n  alert('sucs');\n  console.log(\"Your current position is:\");\n  console.log(`Latitude : ${crd.latitude}`);\n  console.log(`Longitude: ${crd.longitude}`);\n  console.log(`More or less ${crd.accuracy} meters.`);\n}\n\nfunction errors(err) {\n  alert('error');\n  console.warn(`ERROR(${err.code}): ${err.message}`);\n}\n\nexport default class App extends Component {\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.permissions.query({\n        name: \"geolocation\"\n      }).then(function (result) {\n        if (result.state === \"granted\") {\n          console.log(result.state); //If granted then you can directly call your function here\n\n          navigator.geolocation.getCurrentPosition(success);\n        } else if (result.state === \"prompt\") {\n          navigator.geolocation.getCurrentPosition(success, errors, options);\n        } else if (result.state === \"denied\") {//If denied then you have to show instructions to enable location\n        }\n\n        result.onchange = function () {\n          console.log(result.state);\n        };\n      });\n    } else {\n      alert(\"Sorry Not available!\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"GeoLocation hi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this);\n  }\n\n} // export default App;","map":{"version":3,"sources":["/Users/saddafafrinkhan/Projects/Mine/React/chargepointfinder/src/App.js"],"names":["MapContainer","Marker","Popup","TileLayer","icon","React","Component","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","alert","console","log","latitude","longitude","accuracy","errors","err","warn","code","message","App","componentDidMount","navigator","geolocation","permissions","query","name","then","result","state","getCurrentPosition","onchange","render"],"mappings":";;AACA,OAAO,WAAP;AACA,SAAQA,YAAR,EAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,SAArC,QAAqD,eAArD;AACA,SAAQC,IAAR,QAAmB,SAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAGA,IAAIC,OAAO,GAAG;AACZC,EAAAA,kBAAkB,EAAE,IADR;AAEZC,EAAAA,OAAO,EAAE,IAFG;AAGZC,EAAAA,UAAU,EAAE;AAHA,CAAd;;AAKA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,MAAIC,GAAG,GAAGD,GAAG,CAACE,MAAd;AACFC,EAAAA,KAAK,CAAC,MAAD,CAAL;AACEC,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAa,cAAaJ,GAAG,CAACK,QAAS,EAAvC;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAa,cAAaJ,GAAG,CAACM,SAAU,EAAxC;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeJ,GAAG,CAACO,QAAS,UAAzC;AACD;;AAED,SAASC,MAAT,CAAgBC,GAAhB,EAAqB;AACnBP,EAAAA,KAAK,CAAC,OAAD,CAAL;AACAC,EAAAA,OAAO,CAACO,IAAR,CAAc,SAAQD,GAAG,CAACE,IAAK,MAAKF,GAAG,CAACG,OAAQ,EAAhD;AACD;;AAGD,eAAe,MAAMC,GAAN,SAAkBpB,SAAlB,CAA2B;AAExCqB,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBD,MAAAA,SAAS,CAACE,WAAV,CACKC,KADL,CACW;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADX,EAEKC,IAFL,CAEU,UAAUC,MAAV,EAAkB;AACtB,YAAIA,MAAM,CAACC,KAAP,KAAiB,SAArB,EAAgC;AAC9BnB,UAAAA,OAAO,CAACC,GAAR,CAAYiB,MAAM,CAACC,KAAnB,EAD8B,CAE9B;;AAEAP,UAAAA,SAAS,CAACC,WAAV,CAAsBO,kBAAtB,CAAyCzB,OAAzC;AACD,SALD,MAKO,IAAIuB,MAAM,CAACC,KAAP,KAAiB,QAArB,EAA+B;AACpCP,UAAAA,SAAS,CAACC,WAAV,CAAsBO,kBAAtB,CAAyCzB,OAAzC,EAAkDU,MAAlD,EAA0Dd,OAA1D;AACD,SAFM,MAEA,IAAI2B,MAAM,CAACC,KAAP,KAAiB,QAArB,EAA+B,CACpC;AACD;;AACDD,QAAAA,MAAM,CAACG,QAAP,GAAkB,YAAY;AAC5BrB,UAAAA,OAAO,CAACC,GAAR,CAAYiB,MAAM,CAACC,KAAnB;AACD,SAFD;AAGD,OAhBL;AAiBD,KAlBD,MAkBO;AACLpB,MAAAA,KAAK,CAAC,sBAAD,CAAL;AACD;AACF;;AACDuB,EAAAA,MAAM,GAAG;AACP,wBACI;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADJ;AAKD;;AA/BuC,C,CAkC1C","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport {MapContainer, Marker, Popup, TileLayer} from \"react-leaflet\";\nimport {icon} from \"leaflet\";\nimport React, { Component } from \"react\";\n\n\nvar options = {\n  enableHighAccuracy: true,\n  timeout: 5000,\n  maximumAge: 0,\n};\nfunction success(pos) {\n  var crd = pos.coords;\nalert('sucs')\n  console.log(\"Your current position is:\");\n  console.log(`Latitude : ${crd.latitude}`);\n  console.log(`Longitude: ${crd.longitude}`);\n  console.log(`More or less ${crd.accuracy} meters.`);\n}\n\nfunction errors(err) {\n  alert('error')\n  console.warn(`ERROR(${err.code}): ${err.message}`);\n}\n\n\nexport default class App extends Component{\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.permissions\n          .query({ name: \"geolocation\" })\n          .then(function (result) {\n            if (result.state === \"granted\") {\n              console.log(result.state);\n              //If granted then you can directly call your function here\n\n              navigator.geolocation.getCurrentPosition(success);\n            } else if (result.state === \"prompt\") {\n              navigator.geolocation.getCurrentPosition(success, errors, options);\n            } else if (result.state === \"denied\") {\n              //If denied then you have to show instructions to enable location\n            }\n            result.onchange = function () {\n              console.log(result.state);\n            };\n          });\n    } else {\n      alert(\"Sorry Not available!\");\n    }\n  }\n  render() {\n    return (\n        <div>\n          <h2>GeoLocation hi</h2>\n        </div>\n    );\n  }\n}\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}